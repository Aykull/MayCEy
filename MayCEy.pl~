% ------------------------------------------------------------------------------------
% Directriz para evitar alertas de PROLOG molestos para el usuario
:-discontiguous(oracion_inicial/2).
:-discontiguous(sin_nom/2).
:-style_check(-singleton). %Establece que solo se inicie una vez el programa y no varias veces al mismo tiempo


% -------------------------------------------------------------------------
% Predicado que inicia a MayCEy
iniciar_MayCEy:-
    write("Usuario: "),
    read(T), %IMPORTANTE responder entre comillas
    string_lower(T,X),
    split_string(X," ","",L),
    oracion_inicial(L,[]).

% ------------------------------------------------------------------------
% Predicado que da respuesta a la oracion inicial en caso de saludo
%


oracion_inicial(X,Y):-
    (saludo(X,Y)->
    saludo(X,Y),
    write("MayCEy: Hola, ¿en que le puedo ayudar?"),
    nl, %salto de linea
    write("Usuario: "),
    read(T), %lee lo que escribe el usuario
    string_lower(T,U), %lo pasa a minuscula
    split_string(U," ","",L), %lo convierte en una lista
    ultimo_elemento(L,A), %saca el ultimo elemento para determinar si es aterrizaje o despegue
    accion(A,Z), %determina si es llegada o salida %accion(A,Z) establece la relacion entre despegar-->salida / aterrizar-->llegada
    verificarsolicitud(L,[],Z);
    write("Por favor utilizar la sintaxis correcta"),
    nl,
    write("Usuario: "),
    read(W),
    string_lower(W,Z),
    split_string(Z," ","",A),
    oracion_inicial(A,[])).


    %L: lista de las palabras que conforman oracion inicial, Z: salida/llegada
 %IMPORTANTE el parametro Z se usa mas adelante

%Gramatica BNF para la oracion inicial con saludo
saludo --> sin_nom.
sin_nom--> com1,sust. %hola maycey
sin_nom--> com2,com3,sust. %buenos dias/tardes/noches maycey
sin_nom--> com2,com3. %buenos/buenos dias/tardes/noches
sin_nom--> verb,prep,sust. %llamando a maycey

sust--> [W],{sustantivo(W)}.
com1--> [W],{comple1(W)}.
com2--> [W],{comple2(W)}.
com3--> [W],{comple3(W)}.
verb--> [W],{verbo(W)}.
prep--> [W],{prepos(W)}.

%Base de datos para el saludo
sustantivo("maycey").
comple1("hola").
comple2("buenos").
comple3("dias").
comple3("tardes").
comple3("noches").
verbo("llamando").
prepos("a").


% ------------------------------------------------------------------------
% Predicado que retorna el último elemento de una lista

ultimo_elemento([Y],Y).
ultimo_elemento([_|X],Y):- ultimo_elemento(X,Y).


% -------------------------------------------------------------------------------
% Predicado para la verificacion de la solicitud del usuario (despegar o
% aterrizar)

verificarsolicitud(X,Y,Z):-
    (solicitud(X,Y)->
    solicitud(X,Y),
    write("MayCEy: Por favor identifiquese"),
    nl, %salto de linea
    write("Usuario: "),
    read(U), %lee lo que escribe el usuario
    string_lower(U,V), %lo pasa a minuscula
    split_string(V," ","",L), %lo convierte en una lista
    identificacion(L,[],Z);
    write("Por favor utilizar la sintaxis correcta"),
    nl,
    write("Usuario: "),
    read(W),
    string_lower(W,P),
    split_string(P," ","",A),
    verificarsolicitud(A,[],Z)).

%L: lista con la identificacion del usuario
%Z: salida/llegada (se usa mas adelante)

%Gramatica BNF para solicitud de despegue o aterrizaje
solicitud--> sin_v.
sin_v--> verbpres, sust2, prep2, verbinf. %solicito permiso para aterrizar/despegar

verbpres --> [W],{verboprest(W)}.
sust2--> [W],{sustantivo2(W)}.
prep2--> [W], {preposicion2(W)}.
verbinf--> [W], {verboinf(W)}.

%Base de datos para la identificacion del usuario
verboprest("solicito").
sustantivo2("permiso").
preposicion2("para").
verboinf("aterrizar").
verboinf("despegar").

% ------------------------------------------------------------------------
% Predicado que lee la identificacion
identificacion(A,B,Z):-
    ident(A,B),
    write("MayCEy: Gracias, ¿Que tipo de aeronave es?"),
    nl,
    write("Usuario: "),
    read(U),
    asignar(U,Z). %U: aeronave, Z: salida/llegada (Z se usa mas adelante)


%Gramatica BNF para la identificacion del usuario
ident--> identBlock.
identBlock --> tagvuel, numvuel,tagaerol, aeroli, tagmatri, matriaeronave, matriaeronave, matriaeronave, matriaeronave.
               %vuelo: 400,/404, aerolinea: tec-airlines, matricula: {matriculas}

tagvuel--> [W],{tagvuelo(W)}.
numvuel--> [W],{numvuelo(W)}.
tagaerol--> [W],{tagaerolinea(W)}.
aeroli--> [W],{aerolinea(W)}.
tagmatri--> [W],{tagmatri(W)}.
matriaeronave--> [W],{matricula(W)}.

%Base de datos para la identificacion del usuario

%Etiquetas que se deben leer en las respuestas del usuario
tagvuelo("vuelo:").
tagaerolinea("aerolinea:").
tagmatri("matricula:").

%Numeros de vuelo permitidos
numvuelo("401,"). %Hay agregar mas vuelos, digamos del 400 al 410 :v
numvuelo("402,").
numvuelo("403,").
numvuelo("404,").
numvuelo("405,").
numvuelo("406,").
numvuelo("407,").
numvuelo("408,").
numvuelo("409,").
numvuelo("410,").

%Aerolineas permitidas
aerolinea("tec-airlines,").
aerolinea("aykull-airlines,").
aerolinea("jos-airlines,").
aerolinea("ce-airlines,").

%Nombres de las posibles combinaciones de matrículas
matricula("tango").
matricula("fox").
matricula("lima").
matricula("delta").
matricula("charlie").
matricula("alfa").
matricula("echo").
matricula("hotel").
matricula("victor").
matricula("bravo").
matricula("romeo").

% -----------------------------------------------------------------------
% Predicados que determinan si aterriza/despega y asigna la pista segun
% direccion de vuelo y tamaño de aeronave
% AQUIIIIIIIII SE USA Z
asignar(X,Z):-
    aeronave(V,X), %la V indica el tamaño de la aeronave
    write("MayCEy: Por favor indique la hora de "), write(Z),
    nl,
    write("Usuario: "),
    read(H), %"almacena" en H la hora de salida
    hora(H), %La hora para cuando la pista esta ocupada :v
     write("MayCEy: Por favor indique su direccion de "), write(Z),
    nl,
    read(D), %"almacena" la direccion del usuario en D
    pista(P,V,D), %se utiliza el tamaño de la nave V y la direccion D para determinar la pista P
    write("MayCEy: "), write(P), write(" asignada por 5 minutos"),
    nl,
    write("Usuario: "),
    read(Ds),
    string_lower(Ds,Es),
    split_string(Es," ","",L),
    oracion_de_agradecimiento(L,[]).

% -----------------------------------------------------------------------
% Predicado que analiza la oracion de agradecimiento
oracion_de_agradecimiento(X,Y):-
    agrad(X,Y),
    write("MayCEy: Con gusto!"),
    nl,
    write("Usuario: "),
    read(U),
    string_lower(U,V),
    split_string(V," ","",L),
    oracion_final(L,[]).

%Gramatica BNF para la oracion de agradecimiento
agrad--> sm.
sm --> g1.
sm --> ad,g1.

g1--> [W],{agradecimiento(W)}.
ad--> [W],{adjetivo(W)}.

agradecimiento("gracias").
agradecimiento("gracias!").

adjetivo("muchas").

% ------------------------------------------------------------------------
% Predicado que analiza la oracion final para terminar de ejecutar
% MayCEy
oracion_final(X,Y):-despedida(X,Y).

% Gramatica BNF para la oracion de despedida
despedida--> sin_nom_d.
sin_nom_d--> dcom1.
sin_nom_d--> dcom1,dsust. %adios maycey
sin_nom_d--> dcom2,dcon,dcom3,dsust. %cambio y fuera maycey
sin_nom_d--> dcom2,dcon,dcom3. %cambio y fuera


dsust--> [W],{dsustantivo(W)}.
dcom1--> [W],{dcomple1(W)}.
dcom2--> [W],{dcomple2(W)}.
dcom3--> [W],{dcomple3(W)}.
dcon--> [W],{dcong(W)}.

%Base de datos dela despedida
dsustantivo("maycey").
dcomple1("adios").
dcomple2("cambio").
dcomple3("fuera").
dcong("y").


% ------------------------------------------------------------------------------------
% Predicado de la oracion inicial en caso de emergencia
oracion_inicial(X,Y):- oracion_emergencia(X,Y),
    write("MayCEy: Hola, por favor indique ¿cual es su emergencia?"),
    nl,
    write("Usuario: "),
    read(E),
    string_lower(E,El),
    split_string(El," ","",L),
    emergencia(L,[]).

%Gramatica BNF para una emergencia
oracion_emergencia --> sin_nomE.
sin_nomE--> help.  %Mayday/mayday
sin_nomE--> help,help. %Mayday/mayday Mayday/mayday

help --> [W],{id(W)}.

%Base de datos la oracion inicial en caso de emergencia
id("mayday").
id("7500").


% ------------------------------------------------------------------------
% Predicado de la emeregencia

%emergencia(X,Y).

% -----------------------------------------------------------------------------------
% Base de datos del sistema.

%Aviones pequeños.
aeronave(pequeño,"Cessna").
aeronave(pequeño,"Beechcraft").
aeronave(pequeño,"Embraer Pheno").
%Aviones medianos.
aeronave(mediano,"Boing 717").
aeronave(mediano,"Embraer 190").
aeronave(mediano,"Airbus A220").
%Aviones grandes.
aeronave(grande,"Airbus 340").
aeronave(grande,"Airbus 380").

%Pistas.
pista("P1",pequeño,"Este a Oeste").
pista("P1",pequeño,"Oeste a Este").

pista("P2-1",pequeño,"Este a Oeste").
pista("P2-1",mediano,"Este a Oeste").
pista("P2-1",pequeño,"Oeste a Este").
pista("P2-1",mediano,"Oeste a Este").

pista("P3",pequeño,"Este a Oeste").
pista("P3",mediano,"Este a Oeste").
pista("P3",grande,"Este a Oeste").

pista("P3",pequeño,"Oeste a Este").
pista("P3",mediano,"Oeste a Este").
pista("P3",grande,"Oeste a Este").

%Emergencias y su respectiva atención.
emergencias("Perdida de motor","Llamar a bomberos").
emergencias("Parto en vuelo","Llamar a médico").
emergencias("Paro cardiaco de pasajero","Llamar a médico").
emergencias("Secuestro","Llamar al OIJ y a la Fuerza Pública").

%Atención de Emergencias.
atenEmergencias("Llamar a bomberos").
atenEmergencias("Llamar a médico").
atenEmergencias("Llamar al OIJ y a la Fuerza Pública").

%Condición de Aterrizaje.
condición("Viento").
condición("Peso").
condición("Largo de pista").
condición("Velocidad").
condición("Distancia").

%Horarios de salida definidos cierto tiempo (definir) poner mas
hora("1:00").
hora("2:00").
hora("3:00").
hora("4:00").
hora("5:00").
hora("6:00").
hora("7:00").
hora("8:00").
hora("9:00").
hora("10:00").
hora("11:00").
hora("12:00").
hora("13:00").
hora("14:00").
hora("15:00").
hora("16:00").
hora("17:00").
hora("18:00").
hora("19:00").
hora("20:00").
hora("21:00").
hora("22:00").
hora("23:00").
hora("00:00").

%Relaciones entre posibles acciones del usuario
accion("despegar","salida").
accion("aterrizar","llegada").


























































